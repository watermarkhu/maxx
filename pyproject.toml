[project]
name = "maxx"
version = "0.2.3"
description = "Signatures for MATLAB projects"
readme = "README.md"
authors = [
    { name = "Mark Hu", email = "watermarkhu@gmail.com" }
]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Documentation",
    "Topic :: Software Development",
    "Topic :: Software Development :: Documentation",
    "Topic :: Utilities",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "charset-normalizer~=3.4",
    "griffe~=1.7.2",
    "tree-sitter~=0.24",
    "tree-sitter-matlab~=1.0",
    "typing-extensions>=4.0; python_version < '3.11'",
]

[dependency-groups]
dev = [
    "ruff>=0.11.7",
    "pytest>=8.3.5",
    "ty>=0.0.1a12",
    "pytest-cov>=6.1.1",
    "pre-commit>=4.2.0",
]
reference = [
    "beautifulsoup4>=4.13.3",
    "playwright>=1.51.0",
]

[tool.uv.sources]
tree-sitter = { git = "https://github.com/tree-sitter/py-tree-sitter", rev = "c1bd563b330b2c2fe9894beb652bc58ae8613b0c" }

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/maxx"]

[tool.uv]
managed = true

[tool.ruff]
target-version = "py310"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",  # Python specific errors
    "W",  # Warnings
    "F",  # Pyflakes (code complexity)
    "I",  # isort
]
ignore = [
    "E501",  # Line too long
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pyright]
include = ["src"]
typeCheckingMode = "standard"
reportIncompatibleVariableOverride = false
reportIncompatibleMethodOverride = false

[tool.semantic_release]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"
version_toml = [
    "pyproject.toml:project.version",
]

[tool.semantic_release.branches.main]
match = "(?s).*"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat", "enhancement", "improvement", "new"]
patch_tags = ["fix", "perf", "patch", "chore"]
other_allowed_tags = ["build", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
