name: CI

on:
  pull_request:
    branches: [main, development]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-versions.outputs.python-versions }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get Python versions from pyproject.toml
      id: get-versions
      run: |
        # Extract Python versions from classifiers
        versions=$(grep -E "Programming Language :: Python :: 3\.[0-9]+" pyproject.toml | \
                  sed -E 's/.*Python :: (3\.[0-9]+).*/\1/' | \
                  sort -V | \
                  jq -R -s -c 'split("\n")[:-1]')
        echo "python-versions=$versions" >> $GITHUB_OUTPUT
        echo "Found Python versions: $versions"

  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --dev --python ${{ matrix.python-version }}

    - name: Run ruff linting
      run: |
        echo "## 🔍 Ruff Linting Results" >> $GITHUB_STEP_SUMMARY
        if uv run ruff check --output-format=github .; then
          echo "✅ No linting errors found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Linting errors found" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Run ruff formatting check
      run: |
        echo "## 🎨 Code Formatting Check" >> $GITHUB_STEP_SUMMARY
        if uv run ruff format --check .; then
          echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Run mypy type checking
      run: |
        echo "## 🔧 MyPy Type Checking Results" >> $GITHUB_STEP_SUMMARY
        if uv run mypy --pretty --error-summary; then
          echo "✅ No type errors found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Type errors found" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Run pytest
      run: |
        uv run pytest --tb=short -v --junit-xml=pytest.xml

    - name: Upload Test Results
      if: (!cancelled())
      uses: actions/upload-artifact@v4
      with:
        name: Test Results (Python ${{ matrix.python-version }})
        path: pytest.xml
        
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: pytest.xml
        check_name: "Test Results (Python ${{ matrix.python-version }})"

  summary:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: (!cancelled())
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "artifacts/**/*.xml"
